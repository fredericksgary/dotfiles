;; package stuff

(setq package-archives
      '(("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
        ("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

(setq my-packages
  '(clojure-mode
    cider
    align-cljlet
    jabber
    markdown-mode
    multiple-cursors
    paredit
    haskell-mode
    find-file-in-project
    idle-highlight
    refheap
    evil
    magit))

(let ((refreshed nil))
  (dolist (package-name my-packages)
    (unless (package-installed-p package-name)
      (unless refreshed (package-refresh-contents))
      (setq refreshed t)
      (package-install package-name)))

  ;; special handling for org-mode which comes prepackaged with emacs but
  ;; not in a new enough version.
  (unless (package-installed-p 'org (version-to-list "8.2.3c"))
    (unless refreshed (package-refresh-contents))
    (package-install 'org)))

;; for things I've included in this repo
;; (add-to-list 'load-path "~/.emacs.d/included/")

;; modes by file extension
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(require 'clojure-mode)
(require 'cider)
(require 'find-file-in-project)
(require 'paredit)
(require 'markdown-mode)
(require 'align-cljlet)

;; misc

(menu-bar-mode -99)
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
(setq-default indicate-empty-lines t)
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)

;; idle-highlight
;; it highlights usages of the symbol under point
(add-hook 'prog-mode-hook 'idle-highlight)

;; ffip
(global-set-key (kbd "C-x f") 'find-file-in-project)
(setq ffip-full-paths t)
(add-to-list 'ffip-prune-patterns "local")

;; line numbers
(add-hook 'find-file-hook (lambda () (linum-mode 1)))
;; See http://en.wikipedia.org/wiki/Box-drawing_character for other
;; decent separator options
(setq linum-format "%3d\u2551")

;; whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(setq ido-max-directory-size 1000000)

;; Put backup files in /dev/shm/emacs-backups
(shell-command "mkdir -p /dev/shm/gary-emacs-backups && chmod 700 /dev/shm/gary-emacs-backups")
(setq backup-directory-alist '(("." . "/dev/shm/gary-emacs-backups/")))


;; paredit bindings
(defun paredit-custom ()
  "paredit-mode-hook"
  (define-key paredit-mode-map (kbd "C-x z") 'paredit-splice-sexp)
  (define-key paredit-mode-map (kbd "M-)") 'paredit-forward-slurp-sexp)
  (define-key paredit-mode-map (kbd "RET") 'newline-and-indent))
(add-hook 'paredit-mode-hook 'paredit-custom)

;; multiple-cursors
(global-set-key (kbd "C-c m e") 'mc/edit-lines)
(global-set-key (kbd "C-c m n") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c m p") 'mc/mark-previous-like-this)


(defun latex-custom ()
  "latex-mode-hook"
  (define-key latex-mode-map (kbd "C-c e") 'latex-insert-item))
(add-hook 'latex-mode-hook 'latex-custom)

(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-coj" 'org-clock-goto)
(global-set-key "\C-cr" 'rename-buffer)
(global-set-key "\C-cs" 'shell)
(global-set-key "\C-cg" 'magit-status)
(global-set-key "\C-cb" 'bury-buffer)
(global-set-key "\C-cotir" 'org-table-insert-row)
(global-set-key "\C-cotic" 'org-table-insert-column)
(global-set-key "\C-cotdr" 'org-table-kill-row)
(global-set-key "\C-cotdc" 'org-table-delete-column)
(global-set-key "\C-cc" 'org-capture)
;; (global-set-key "\C-cb" 'org-iswitchb)
;; (global-set-key "\C-cl" 'org-store-link)

;; magit!
(require 'magit)
(set-face-background 'magit-item-highlight "white")
(setq magit-last-seen-setup-instructions "1.4.0")

;; Haskell?
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

;; JavaScript
(setq js-indent-level 2)

;; org-mode bindings
(defun org-custom ()
  "org-mode-hook"
  (org-defkey org-mode-map (kbd "RET") 'newline-and-indent)
  (org-defkey org-mode-map (kbd "C-c o e") 'org-insert-heading)
  (org-defkey org-mode-map (kbd "C-c o f") 'org-insert-subheading)
  (org-defkey org-mode-map (kbd "C-c o g") 'org-promote-subtree)
  (org-defkey org-mode-map (kbd "C-c o d") 'org-demote-subtree)
  (org-defkey org-mode-map (kbd "C-c o p") 'org-move-subtree-up)
  (org-defkey org-mode-map (kbd "C-c o n") 'org-move-subtree-down))
(add-hook 'org-mode-hook 'org-custom)

;; so the org agenda doesn't give me this weird 3/4 window
(setq org-agenda-window-setup nil)

(setq org-log-done 'note)


;; Allows calling narrow-to-region without confirmation
(put 'narrow-to-region 'disabled nil)

;; Using beamer with org-mode;
;; Pasted and modified from
;; http://emacs-fu.blogspot.com/2009/10/writing-presentations-with-org-mode-and.html
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
  '("beamer"
    "\\documentclass\[presentation\]\{beamer\}"

     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
     ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")

     ("\\begin{frame}[fragile]\\frametitle{%s}"
       "\\end{frame}"
       "\\begin{frame}[fragile]\\frametitle{%s}"
       "\\end{frame}")))
(require 'ox-beamer)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(add-to-list 'org-latex-packages-alist '("" "listings"))
(setq org-latex-minted-options
      '(("frame" "single")
        ("linenos" "")))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
            '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(defcustom gfredericks-autoexport-beamer nil
  "Exports org buffer to beamer files on save.")
(add-hook 'after-save-hook
          (lambda ()
            (if gfredericks-autoexport-beamer
                (org-beamer-export-to-latex)))
          t)



;; General editing bindings
(global-set-key (kbd "C-h") 'backward-delete-char-untabify)
(global-set-key (kbd "C-c n") (lambda () (interactive) (other-window 2)))
(global-set-key (kbd "C-c p") (lambda () (interactive) (other-window -1)))
(global-set-key (kbd "C-c h") 'enlarge-window-horizontally)

;; Because I've unshifted the numeric keys
;; (global-set-key (kbd "C-x !") (key-binding (kbd "C-x 1")))
;; (global-set-key (kbd "C-x @") (key-binding (kbd "C-x 2")))
;; (global-set-key (kbd "C-x #") (key-binding (kbd "C-x 3")))
;; (global-set-key (kbd "C-x $") (key-binding (kbd "C-x 4")))

;; Scrolling. Someone on the internet suggested this might be less than
;; ideal. I dunno why. Whatever.
(setq scroll-step            1
      scroll-conservatively  10000)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(erc-modules (quote (autoaway autojoin button completion fill irccontrols list match menu move-to-prompt netsplit networks noncommands readonly ring stamp track)) t)
 '(safe-local-variable-values (quote ((gfredericks-autoexport-beamer . t)
                                      (org-latex-title-command . nil)))))
;; Please stop setting me to being away
(setq erc-autoaway-idle-seconds 86400)

;;;;;;;;;;;;;
;; CLOJURE ;;
;;;;;;;;;;;;;

;; Pasted from https://github.com/mpenet/emax/blob/master/config/modes.el#L89
(defmacro defclojureface (name color desc &optional others)
  `(defface ,name '((((class color)) (:foreground ,color ,@others))) ,desc :group 'faces))

;; (defclojureface clojure-parens "DimGrey" "Clojure parens")
;; (defclojureface clojure-braces "yellow" "Clojure braces")
(defclojureface clojure-brackets "blue" "Clojure brackets")
(defclojureface clojure-keyword "#bfebbf" "Clojure keywords")
;; (defclojureface clojure-java-call "#4bcf68" "Clojure Java calls")
;; (defclojureface clojure-special "#b8bb00" "Clojure special")
;; (defclojureface clojure-double-quote "#b8bb00" "Clojure special" (:background "unspecified"))
(set-face-foreground 'font-lock-comment-face "red")
(defun tweak-clojure-syntax ()
  (dolist (x '((("#?['`]*(\\|)" . 'clojure-parens))
               (("#?\\^?{\\|}" . 'clojure-brackets))
               (("\\[\\|\\]" . 'clojure-braces))
               ((":\\w+#?" . 'clojure-keyword))
               (("#?\"" 0 'clojure-double-quote prepend))
               (("nil\\|true\\|false\\|%[1-9]?" . 'clojure-special))
               (("(\\(\\.[^ \n)]*\\|[^ \n)]+\\.\\|new\\)\\([ )\n]\\|$\\)" 1 'clojure-java-call))
               ))
    (font-lock-add-keywords nil x)))

;; Tell cider not to require clojure.repl &c on startup
(setq nrepl-repl-requires-sexp "()")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIDER MONKEYPATCH CUSTOMIZATIONS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Customized in-repl output
(defun cider-interactive-eval-print-handler (buffer)
  "Make a handler for evaluating and printing result in BUFFER."
  (nrepl-make-response-handler buffer
                               (lambda (buffer value)
                                 (with-current-buffer buffer
                                   (if (string-match "\n" value)
                                     (insert (format "\n=>\n%s" value))
                                     (insert (format " => %s" value)))))
                               (lambda (_buffer value)
                                 (cider-repl-emit-interactive-output value))
                               (lambda (_buffer err)
                                 (message "%s" err))
                               '()))

;; pretty printing
(defvar gfredericks-use-whidbey-pprint nil)
(defadvice nrepl-eval-request (after nrepl-eval-request-after)
  "Add the \"renderer\" option when pretty-printing."
  (if gfredericks-use-whidbey-pprint
      (setq ad-return-value
            (append ad-return-value
                    (list "renderer" "puget.printer/pprint-str")))))
(ad-activate 'nrepl-eval-request)
(defadvice cider-interactive-eval-print (around cider-interactive-eval-print-around)
  "Pretty print with in-buffer evaluation."
  (let ((gfredericks-use-whidbey-pprint t))
    ad-do-it))
(ad-activate 'cider-interactive-eval-print)
(defadvice cider-repl--send-input (around cider-repl--send-input-around)
  "Pretty-print in the repl buffer."
  (let ((gfredericks-use-whidbey-pprint t))
    ad-do-it))
(ad-activate 'cider-repl--send-input)


;; Auto-eval on save
(defun reload-buffer-if-cider-running ()
  (interactive)
  (if (and (cider-connected-p)
           (string= "(ns " (buffer-substring-no-properties 1 5))
           (string-match "\\.clj$" (buffer-name)))
      (cider-load-buffer)))


(add-hook 'clojure-mode-hook
          (lambda () (paredit-mode +1)
                     (tweak-clojure-syntax)
                     (show-paren-mode +1)
                     (add-hook 'after-save-hook 'reload-buffer-if-cider-running nil 'make-local)
                     (define-key clojure-mode-map (kbd "C-c C-a") 'align-cljlet)))

;; rebinding these two from C-c C-z since C-z is captured by my tmux
(add-hook 'cider-repl-mode-hook
          (lambda () (define-key cider-repl-mode-map (kbd "C-c C-y") 'cider-switch-to-last-clojure-buffer)))
(add-hook 'cider-mode-hook
          (lambda () (define-key cider-mode-map (kbd "C-c C-y") 'cider-switch-to-relevant-repl-buffer)))

(dolist (macro '(fresh conde run run* for-all for-map go go-loop
                 for> doseq> fn> defn> defprotocol> gen-for fnk
                 macrolet bg letfn> domonad))
  (put-clojure-indent macro 'defun))


;; java

(add-hook 'java-mode-hook (lambda ()
          (setq c-basic-offset 2)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; org-babel + Clojure (stolen from stuartsierra's dotfiles)

(when (locate-file "ob" load-path load-suffixes)
  (require 'ob)
  (require 'ob-tangle)
  (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (clojure . t)))

  (defun org-babel-execute:clojure (body params)
    "Evaluate a block of Clojure code with Babel."
    (let* ((gfredericks-use-whidbey-pprint t)
           (result (nrepl-send-string-sync body (cider-current-ns)))
           (value (plist-get result :value))
           (out (plist-get result :stdout))
           (out (when out
                  (if (string= "\n" (substring out -1))
                      (substring out 0 -1)
                    out)))
           (err (plist-get result :stderr))
           (err (when err
                  (if (string= "\n" (substring err -1))
                      (substring err 0 -1)
                    err)))
           (stdout (when out
                     (mapconcat (lambda (line)
                                  (concat ";; " line))
                                (split-string out "\n")
                                "\n")))
           (stderr (when err
                     (mapconcat (lambda (line)
                                  (concat ";; " line))
                                (split-string err "\n")
                                "\n")))
           (formatted-value (when value
                              (mapconcat (lambda (line)
                                           (concat ";;   " line))
                                         (split-string value "\n")
                                         "\n")))
           (output (concat stdout
                           (when (and stdout (not (string= "\n" (substring stdout -1))))
                             "\n")
                           stderr)))
      (concat output
              (when (and output
                         (not (string= "" output))
                         (not (string= "\n" (substring output -1))))
                "\n")
              (when value (concat ";;=> " (substring formatted-value 5))))))

  (provide 'ob-clojure)

  (setq org-src-fontify-natively t)
  (setq org-confirm-babel-evaluate nil))

;; Load any ~/.emacs.d/init.*.el files
(dolist (file (directory-files user-emacs-directory
                               nil
                               "^init\\..*\\.el"))
  (load (concat user-emacs-directory file)))

;; Evil Mode
;; (global-set-key (kbd "C-c e") 'evil-mode) ; easy toggle


;; XML we all like XML right
;;
;; Pasted this from
;; http://stackoverflow.com/questions/12492/pretty-printing-xml-files-on-emacs
(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))
