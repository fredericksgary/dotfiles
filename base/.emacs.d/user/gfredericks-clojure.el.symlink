(provide 'gfredericks-clojure)

(require 'gfredericks-packages)

(gfredericks-packages-install 'clojure-mode)
(gfredericks-packages-install 'cider)
(gfredericks-packages-install 'align-cljlet)
(gfredericks-packages-install 'paredit)

(require 'clojure-mode)
(require 'cider)
(require 'align-cljlet)
(require 'paredit)


;; paredit bindings
(defun paredit-custom ()
  "paredit-mode-hook"
  (define-key paredit-mode-map (kbd "RET") 'newline-and-indent))
(add-hook 'paredit-mode-hook 'paredit-custom)


;; Tell cider not to require clojure.repl &c on startup
(setq nrepl-repl-requires-sexp "()")
(setq cider-repl-display-help-banner nil)

(setq cider-pprint-fn 'puget)
(setq cider-repl-use-pretty-printing t)

;; Auto-eval on save
(defun reload-buffer-if-cider-running ()
  (interactive)
  (if (and (cider-connected-p)
           (string= "(ns " (buffer-substring-no-properties 1 5))
           (string-match "\\.clj$" (buffer-name)))
      (cider-load-buffer)))

(defun intellij-paredit-select-around ()
  (interactive)
  (paredit-backward-up)
  (paredit-forward)
  (set-mark-command nil)
  (paredit-backward))

(add-hook 'clojure-mode-hook
          (lambda () (paredit-mode +1)
                     (show-paren-mode +1)
                     (define-key clojure-mode-map (kbd "C-c C-a") 'align-cljlet)
                     (define-key clojure-mode-map (kbd "M-RET")   'indent-new-comment-line)
                     (define-key clojure-mode-map (kbd "C-M-w") 'intellij-paredit-select-around)))

;; like cider-eval-last-sexp, but always pretty-prints
(defun gfredericks-cider-eval-last-sexp (&optional output-to-current-buffer)
  "Evaluate the expression preceding point.
  If invoked with OUTPUT-TO-CURRENT-BUFFER, print the result in the current buffer."
  (interactive "P")
  (if output-to-current-buffer
      (if (= 16 (prefix-numeric-value output-to-current-buffer))
          (cider-pprint-eval-last-sexp-to-repl)
        (cider-pprint-eval-last-sexp-to-comment))
    (cider-eval-last-sexp)))

(setq cider-comment-prefix "#_=> ")
(setq cider-comment-continued-prefix "#_=> ")
(setq cider-comment-postfix "")

;; rebinding these two from C-c C-z since C-z is captured by my tmux
(add-hook 'cider-repl-mode-hook
          (lambda () (define-key cider-repl-mode-map (kbd "C-c C-y") 'cider-switch-to-last-clojure-buffer)))
(add-hook 'cider-mode-hook
          (lambda ()
            (define-key cider-mode-map (kbd "C-c C-y") 'cider-switch-to-repl-buffer)
            ;;         C-x C-e: evals to minibuffer, tmp display in buffer
            ;;     C-u C-x C-e: inserts commented & pprinted into buffer
            ;; C-u C-u C-x C-e: pprints to repl
            (define-key cider-mode-map (kbd "C-x C-e") 'gfredericks-cider-eval-last-sexp)))

(dolist (macro '(fresh conde run run* for-all for-map go go-loop
                 for> doseq> fn> defn> defprotocol> gen-for fnk
                 macrolet bg letfn> domonad checking))
  (put-clojure-indent macro 'defun))
